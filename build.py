import json
from glob import glob
from pathlib import Path
from markdown import markdown

def inject_html(html_content: str, title: str) -> None :
  return '''<!-- this file is auto-generated by ./build.py -->
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>%s</title>
        <link rel="stylesheet" href="../../css/base.css">
        <link rel="stylesheet" href="../../css/markdown.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@5.61.0/lib/codemirror.min.css">
        <script src="https://cdn.jsdelivr.net/npm/codemirror@5.61.0/addon/runmode/runmode-standalone.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/codemirror@5.61.0/mode/python/python.min.js"></script>
        <script> <!-- Configure MathJax to process $...$ -->
            window.MathJax = {
                tex: {
                    inlineMath: [['$', '$']],
                    displayMath: [['$$','$$']]
                }
            };
        </script>
        <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
        <script type="text/javascript">
        window.onload = function() {
            var codeBlocks = document.querySelectorAll('code.python_code');
            codeBlocks.forEach(function(codeElement) {
                codeElement.classList.add('cm-s-default');
                var code = codeElement.innerText;
                codeElement.innerHTML = "";
                CodeMirror.runMode(code, 'python', codeElement);
            });
        };
        </script>
    </head>
    <body>
        %s
    </body>
</html>
''' %(title, html_content)

def main() -> None :
    project_paths = sorted(list(map(Path, glob('./content/*'))))

    projects = []
    print('building...')
    for (i, p) in enumerate(project_paths): 
        # reading project meta, to be added to projects.json
        with open(p.joinpath('info.json'), 'r') as handle : 
            info = json.load(handle)
            info['root'] = str(p) if not('redirect' in info) else info['redirect']
            projects.append(info)

        if not('redirect' in info) and not("prebuild" in info):
            # reading and parsing the markdown file:
            with open(p.joinpath('main.md'), 'r') as handle :
                md = ''.join(handle.readlines())
            html = inject_html(markdown(md), info['title'])
            # exporting the .html
            with open(p.joinpath('main.html'), 'w') as handle :
                handle.writelines(html)

        print(f'[{i+1:03d}/{len(project_paths):03d}]', p.name)

    # exporting all project meta data to draw the tiles
    with open('./projects.json', 'w') as handle :
        json.dump(projects, handle)

if (__name__ == '__main__') : main()